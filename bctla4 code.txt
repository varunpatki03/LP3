BCT LA 4: Write a program in solidity to create Student data. Use the following constructs: 
 Structures 
 Arrays 
 Fallback 
Deploy this as smart contract on Ethereum and Observe the transaction fee and Gas values.


// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentData {
    
    // Structure to hold student data
    struct Student {
        uint id;
        string name;
        uint age;
        string course;
    }

    // Array to store multiple student structures
    Student[] public students;

    // Mapping to track student IDs to ensure uniqueness
    mapping(uint => bool) public studentExists;

    // Fallback function to handle any ETH sent to the contract
    fallback() external payable {
        // You can log a message or handle unexpected ETH transfers here
    }

    // Function to add a new student
    function addStudent(uint _id, string memory _name, uint _age, string memory _course) public {
        require(!studentExists[_id], "Student ID already exists.");
        students.push(Student(_id, _name, _age, _course));
        studentExists[_id] = true;
    }

    // Function to get a student's details by index
    function getStudent(uint index) public view returns (uint, string memory, uint, string memory) {
        require(index < students.length, "Invalid index.");
        Student memory student = students[index];
        return (student.id, student.name, student.age, student.course);
    }

    // Function to get the total number of students
    function getStudentCount() public view returns (uint) {
        return students.length;
    }
    
    // Receive ETH
    receive() external payable {}

    // Function to withdraw any ETH sent to the contract
    function withdraw() public {
        payable(msg.sender).transfer(address(this).balance);
    }
}
